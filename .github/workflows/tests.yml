# This is a workflow to run our unit and integration tests for windows and mac

name: dbt Tests

# Triggers
on:
  # Triggers the workflow on push or pull request events and also adds a manual trigger
  push:
    branches: 
      - 'develop' 
      - '*.latest' 
      - 'releases/*'
  pull_request_target:
    branches: 
      - 'develop' 
      - '*.latest' 
      - 'pr/*'
      - 'releases/*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  Linting:
    runs-on: ubuntu-latest #no need to run on every OS
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2.2.2
      with:
        python-version: '3.8'
        architecture: 'x64'

    - name: 'Install dependencies'
      run: python -m pip install --upgrade pip && pip install tox
      
    - name: 'Linting'
      run: tox -e mypy,flake8 -- -v
      
  UnitTest:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.6', '3.7', '3.8']
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2.2.2
      with:
        python-version:  ${{ matrix.python-version }}
        architecture: 'x64'

    - name: 'Install dependencies'
      run: python -m pip install --upgrade pip && pip install tox

    - name: 'Run unit tests'
      run: python -m tox -e py -- -v
      
  PostgresIntegrationTest-Windows:   
     strategy:
      matrix:
        include: 
          - python-version: '3.6'
            environment-version: 'py36-postgres'
          - python-version: '3.7'
            environment-version: 'py37-postgres'
          - python-version: '3.8'
            environment-version: 'py38-postgres'
    runs-on: 'windows-latest'
    environment: 'Postgres'
    needs: UnitTest
    steps:
    - uses: actions/checkout@v2
    - name: 'Install postgresql and set up database'
      shell: pwsh
      run: |
          $serviceName = Get-Service -Name postgresql*
          Set-Service -InputObject $serviceName -StartupType Automatic
          Start-Service -InputObject $serviceName
          & $env:PGBIN\createdb.exe -U postgres dbt
          & $env:PGBIN\psql.exe  -U postgres -c "CREATE ROLE root WITH PASSWORD '$env:ROOT_PASSWORD';"
          & $env:PGBIN\psql.exe  -U postgres -c "ALTER ROLE root WITH LOGIN;"
          & $env:PGBIN\psql.exe  -U postgres -c "GRANT CREATE, CONNECT ON DATABASE dbt TO root WITH GRANT OPTION;"
          & $env:PGBIN\psql.exe  -U postgres -c "CREATE ROLE noaccess WITH PASSWORD '$env:NOACCESS_PASSWORD' NOSUPERUSER;"
          & $env:PGBIN\psql.exe  -U postgres -c "ALTER ROLE noaccess WITH LOGIN;"
          & $env:PGBIN\psql.exe  -U postgres -c "GRANT CONNECT ON DATABASE dbt TO noaccess;"
      env:
          ROOT_PASSWORD: ${{ secrets.ROOT_PASSWORD }}
          NOACCESS_PASSWORD: ${{ secrets.NOACCESS_PASSWORD }}
      
    - name: Setup Python
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'
        
    - name: 'Install dependencies'
      run: python -m pip install --upgrade pip && pip install tox
      
    - name: 'Run integration tests'
      run: python -m tox -e ${{ matrix.environment-version }} -- -v -n4
  
  PostgresIntegrationTest-Mac:
    strategy:
      matrix:
        include: 
          - python-version: '3.6'
            environment-version: 'py36-postgres'
          - python-version: '3.7'
            environment-version: 'py37-postgres'
          - python-version: '3.8'
            environment-version: 'py38-postgres'
    runs-on: macos-latest
    environment: 'Postgres'
    steps:
    - uses: actions/checkout@v2
    - name: Start PostgreSQL on MacOS
      run: |
        brew services start postgresql
        echo "Check PostgreSQL service is running"
        i=10
        COMMAND='pg_isready'
        while [ $i -gt 0 ]; do
          echo "Check PostgreSQL service status"
          eval $COMMAND && break
          ((i--))
          if [ $i == 0 ]; then
              echo "PostgreSQL service not ready, all attempts exhausted"
              exit 1
          fi
          echo "PostgreSQL service not ready, wait 10 more sec, attempts left: $i"
          sleep 10
        done
    - name: Create users and DBs
      run: |  
        psql --command="CREATE USER root PASSWORD 'password'" --command="\du" postgres
        createdb --owner=root dbt 
        PGPASSWORD=password psql --username=root --host=localhost --list dbt 
        psql --command="CREATE USER noaccess PASSWORD 'password'" --command="\du" postgres
        psql --command="grant all privileges on database dbt to noaccess" --command="\du" postgres
        createdb --owner=root dbtMixedCase 
        
    - name: Setup Python
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'
        
    - name: 'Install dependencies'
      run: python -m pip install --upgrade pip && pip install tox
      
    - name: 'Run integration tests'
      run: tox -p -e ${{ matrix.environment-version }} -- -v -n4
  
  # These three are all similar except secure environment variables, which MUST be passed along to their tasks,
  # but there's probably a better way to do this!
  SnowflakeIntegrationTest:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ['3.6', '3.7', '3.8']
    runs-on: ${{ matrix.os }}
    environment: 'Snowflake'
    needs: UnitTest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'

      - name: 'Install dependencies'
        run: python -m pip install --upgrade pip && pip install tox

      - name: 'Run integration tests'
        run: python -m tox -e py-snowflake -- -v -n4
        env:
          SNOWFLAKE_TEST_ACCOUNT: ${{ secrets.SNOWFLAKE_TEST_ACCOUNT }}
          SNOWFLAKE_TEST_PASSWORD: ${{ secrets.SNOWFLAKE_TEST_PASSWORD }}
          SNOWFLAKE_TEST_USER: ${{ secrets.SNOWFLAKE_TEST_USER }}
          SNOWFLAKE_TEST_WAREHOUSE: ${{ secrets.SNOWFLAKE_TEST_WAREHOUSE }}
          SNOWFLAKE_TEST_OAUTH_REFRESH_TOKEN: ${{ secrets.SNOWFLAKE_TEST_OAUTH_REFRESH_TOKEN }}
          SNOWFLAKE_TEST_OAUTH_CLIENT_ID: ${{ secrets.SNOWFLAKE_TEST_OAUTH_CLIENT_ID }}
          SNOWFLAKE_TEST_OAUTH_CLIENT_SECRET: ${{ secrets.SNOWFLAKE_TEST_OAUTH_CLIENT_SECRET }}
          SNOWFLAKE_TEST_ALT_DATABASE: ${{ secrets.SNOWFLAKE_TEST_ALT_DATABASE }}
          SNOWFLAKE_TEST_ALT_WAREHOUSE: ${{ secrets.SNOWFLAKE_TEST_ALT_WAREHOUSE }}
          SNOWFLAKE_TEST_DATABASE: ${{ secrets.SNOWFLAKE_TEST_DATABASE }}
          SNOWFLAKE_TEST_QUOTED_DATABASE: ${{ secrets.SNOWFLAKE_TEST_QUOTED_DATABASE }}
          SNOWFLAKE_TEST_ROLE: ${{ secrets.SNOWFLAKE_TEST_ROLE }}

  BigQueryIntegrationTest:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ['3.6', '3.7', '3.8']
    runs-on: ${{ matrix.os }}
    environment: 'Bigquery'
    needs: UnitTest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'
        
      - name: 'Install dependencies'
        run: python -m pip install --upgrade pip && pip install tox
      
      - name: 'Run integration tests'
        run: python -m tox -e py-bigquery -- -v -n4
        env:
          BIGQUERY_SERVICE_ACCOUNT_JSON: ${{ secrets.BIGQUERY_SERVICE_ACCOUNT_JSON }}
          BIGQUERY_TEST_ALT_DATABASE: ${{ secrets.BIGQUERY_TEST_ALT_DATABASE }}

  RedshiftIntegrationTest:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ['3.6', '3.7', '3.8']
    runs-on: ${{ matrix.os }}
    environment: 'Redshift'
    needs: UnitTest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'

      - name: 'Install dependencies'
        run: python -m pip install --upgrade pip && pip install tox

      - name: 'Run integration tests' 
        run: python -m tox -e py-redshift -- -v -n4
        env:
          REDSHIFT_TEST_DBNAME: ${{ secrets.REDSHIFT_TEST_DBNAME }}
          REDSHIFT_TEST_PASS: ${{ secrets.REDSHIFT_TEST_PASS }}
          REDSHIFT_TEST_USER: ${{ secrets.REDSHIFT_TEST_USER }}
          REDSHIFT_TEST_PORT: ${{ secrets.REDSHIFT_TEST_PORT }}
          REDSHIFT_TEST_HOST: ${{ secrets.REDSHIFT_TEST_HOST }}
